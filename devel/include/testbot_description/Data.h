// Generated by gencpp from file testbot_description/Data.msg
// DO NOT EDIT!


#ifndef TESTBOT_DESCRIPTION_MESSAGE_DATA_H
#define TESTBOT_DESCRIPTION_MESSAGE_DATA_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace testbot_description
{
template <class ContainerAllocator>
struct Data_
{
  typedef Data_<ContainerAllocator> Type;

  Data_()
    : leftf(0)
    , leftr(0)
    , rightf(0)
    , rightr(0)
    , angle(0)  {
    }
  Data_(const ContainerAllocator& _alloc)
    : leftf(0)
    , leftr(0)
    , rightf(0)
    , rightr(0)
    , angle(0)  {
  (void)_alloc;
    }



   typedef int64_t _leftf_type;
  _leftf_type leftf;

   typedef int64_t _leftr_type;
  _leftr_type leftr;

   typedef int64_t _rightf_type;
  _rightf_type rightf;

   typedef int64_t _rightr_type;
  _rightr_type rightr;

   typedef int64_t _angle_type;
  _angle_type angle;




  typedef boost::shared_ptr< ::testbot_description::Data_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::testbot_description::Data_<ContainerAllocator> const> ConstPtr;

}; // struct Data_

typedef ::testbot_description::Data_<std::allocator<void> > Data;

typedef boost::shared_ptr< ::testbot_description::Data > DataPtr;
typedef boost::shared_ptr< ::testbot_description::Data const> DataConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::testbot_description::Data_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::testbot_description::Data_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace testbot_description

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'testbot_description': ['/home/ayushgarg/catkin_ws/src/testbot_description/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::testbot_description::Data_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::testbot_description::Data_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::testbot_description::Data_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::testbot_description::Data_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::testbot_description::Data_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::testbot_description::Data_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::testbot_description::Data_<ContainerAllocator> >
{
  static const char* value()
  {
    return "795a1a99ef68b6e918deb625bb3942b3";
  }

  static const char* value(const ::testbot_description::Data_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x795a1a99ef68b6e9ULL;
  static const uint64_t static_value2 = 0x18deb625bb3942b3ULL;
};

template<class ContainerAllocator>
struct DataType< ::testbot_description::Data_<ContainerAllocator> >
{
  static const char* value()
  {
    return "testbot_description/Data";
  }

  static const char* value(const ::testbot_description::Data_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::testbot_description::Data_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int64 leftf\n\
int64 leftr\n\
int64 rightf\n\
int64 rightr\n\
int64 angle\n\
";
  }

  static const char* value(const ::testbot_description::Data_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::testbot_description::Data_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.leftf);
      stream.next(m.leftr);
      stream.next(m.rightf);
      stream.next(m.rightr);
      stream.next(m.angle);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER;
  }; // struct Data_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::testbot_description::Data_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::testbot_description::Data_<ContainerAllocator>& v)
  {
    s << indent << "leftf: ";
    Printer<int64_t>::stream(s, indent + "  ", v.leftf);
    s << indent << "leftr: ";
    Printer<int64_t>::stream(s, indent + "  ", v.leftr);
    s << indent << "rightf: ";
    Printer<int64_t>::stream(s, indent + "  ", v.rightf);
    s << indent << "rightr: ";
    Printer<int64_t>::stream(s, indent + "  ", v.rightr);
    s << indent << "angle: ";
    Printer<int64_t>::stream(s, indent + "  ", v.angle);
  }
};

} // namespace message_operations
} // namespace ros

#endif // TESTBOT_DESCRIPTION_MESSAGE_DATA_H
